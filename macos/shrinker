#!/bin/zsh -eu

MAX_FILE_SIZE=5000000

# Return the image type.
function type_fast {
  basename "$1" | sed 's/.*[.]//g'
}

# Return the image width (in pixels).
function width {
  identify -format "%w" "$1"
}

# Return the image height (in pixels).
function height {
  identify -format "%h" "$1"
}

# Change the compression level on the given image.
function compression {
  identify -format "%C" "$1"
}

# Is the file already below the maximum size?
function small_enough {
  size=$( stat -f %z "$1" )
  [[ ${size} -lt ${MAX_FILE_SIZE} ]]
}

# Attempt to shrink the given image.
function shrink {
  size=$( stat -f %z "$1" )

  if $( small_enough "$1" ) ; then
    return
  fi

  echo "Too large,slimming down: $1 ${size}"

  convert -quality 90 "$1" "$1"

  if $( small_enough "$1" ) ; then
    return
  fi

  convert -quality 85 "$1" "$1"

  if $( small_enough "$1" ) ; then
    return
  fi

  # TODO: Shrink spatial resolution.

  echo "Too large, need to slim down: $1 ${size}"
}

# Iterate over each file on the command line.
while [[ "$*" != "" ]] ; do
  file=$1
  shift

  type=$( type_fast "${file}" )

  case "${type}" in
    JPG)
      ;;
    JPEG)
      ;;
    jpg)
      ;;
    jpeg)
      ;;
    PNG)
      ;;
    png)
      ;;
    *)
    echo "Skipping non-image file ${file}"
      continue
  esac

  if $( small_enough "$file" ) ; then
    continue
  fi

  shrink "${file}"
done

