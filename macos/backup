#!/bin/bash -eu

#
# https://alecmuffett.com/article/12847
# brew install rsync
#
# Copy key files from the Mac to one backup drive.
# Copy key files to one backup drive and then sync that drive to a second drive.

ROOT=$( dirname $0 )

function usage() {
  echo $@
  echo
  echo "Usage: $( basename $0 ) 1|2 [--no-health-check]"
  exit 1
}

[ $# -ge 1 ] || usage "ERROR: You must supply an argument."
[ $# -le 2 ] || usage "ERROR: Too many arguments."

DRIVES=$1
if [[ ${DRIVES} -lt 1 ]] ; then
  DRIVES=2
fi
if [[ ${DRIVES} -gt 2 ]] ; then
  usage "ERROR: Can only backup to 1 or 2 drives. Invalid count: ${DRIVES}"
fi

HEALTH_CHECK=1
if [ $# -gt 1 ] ; then
	if [[ "$2" == "--no-health-check" ]] ; then
		HEALTH_CHECK=0
	fi
fi


echo "Backup up to ${DRIVES} drives"

function healthCheck() {
  if [[ ${HEALTH_CHECK} -eq 0 ]] ; then
    echo "Skipping drive health check ..."
    return
  fi

  dname=$( mount | egrep "$1 " | awk '{ print $1 }' )

  # For older systems (CC still uses this)
  #sudo fsck_hfs -fy -l ${dname} || usage "Health check failed. Run disk utility and select First Aid."
  sudo fsck_apfs -l -n -W ${dname} || usage "Health check failed. Run disk utility and select First Aid."
  sudo --remove-timestamp  # Delete cached credentials
}

function AssertMounted() {
  if [[ ! -d $1 ]]
  then
    usage "ERROR: There is no backup drive mounted in: $1"
  fi

  driveCount=$2

  # Sometimes stray directories are left behind in /Volumes
  # even if no device is mounted there. Watch for that.
  mounts=$( ls -d /Volumes/Apricorn* | wc -l )
  if [[ $mounts -gt ${driveCount} ]]; then
    usage "ERROR: There are too many /Volumes/Apricorn* mounts"
  fi
  if [[ $mounts -lt ${driveCount} ]]; then
    usage "ERROR: There are too few /Volumes/Apricorn* mounts"
  fi
}

drive=/Volumes/Apricorn
drive2=/Volumes/Apricorn2

AssertMounted ${drive} ${DRIVES}
healthCheck ${drive}
if [[ ${DRIVES} -gt 1 ]] ; then
  echo ""
  AssertMounted ${drive2} ${DRIVES}
  healthCheck ${drive2}
fi

echo ""

computer=$( hostname )
echo "Using hostname: ${computer}"
mkdir -p ${drive}/${computer}

src="/Users/erikbryant"
echo "rsync ${src}"
dest=${drive}/${computer}/${src}
mkdir -p ${dest}

# rsync has trouble with special characters on some destination filesystems.
# Use --iconv to work around this. https://alecmuffett.com/article/12847
rsync -a --delete --itemize-changes --iconv=utf-8-mac,utf-8-mac --exclude-from=${ROOT}/backup.exclude ${src}/ ${dest}

src="/Users/photos"
if [[ -d ${src} ]]
then
  echo "rsync ${src}"
  dest=${drive}/${computer}/${src}
  mkdir -p ${dest}
  rsync -a --delete ${src}/ ${dest}
fi

# Copy the primary drive to a secondary (if one is attached).
if [[ ${DRIVES} -gt 1 ]] ; then
  echo "Syncing drives together ..."
  rsync -a --delete --itemize-changes --xattrs --iconv=utf-8-mac,utf-8-mac --exclude-from=${ROOT}/backup.exclude.fs ${drive}/ ${drive2}
  echo
fi
